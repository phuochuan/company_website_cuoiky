// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using company_website.Models;

#nullable disable

namespace company_website.Migrations
{
    [DbContext(typeof(CompanyDbContext))]
    [Migration("20240521014743_AddAgeToEmployee")]
    partial class AddAgeToEmployee
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("company_website.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("NAME");

                    b.HasKey("Id")
                        .HasName("PK__CATEGORY__3214EC27FFE92409");

                    b.ToTable("CATEGORY", (string)null);
                });

            modelBuilder.Entity("company_website.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Facebook")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("FACEBOOK");

                    b.Property<string>("FocusedfIeld")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("FOCUSEDfIELD");

                    b.Property<string>("Located")
                        .HasColumnType("text")
                        .HasColumnName("LOCATED");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("NAME");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PHONE");

                    b.Property<string>("X")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK__COMPANY__3214EC2764E4C18D");

                    b.ToTable("COMPANY", (string)null);
                });

            modelBuilder.Entity("company_website.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("COMPANY_ID");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.HasKey("Id")
                        .HasName("PK__DEPARTME__3214EC2772C264B9");

                    b.HasIndex("CompanyId");

                    b.ToTable("DEPARTMENT", (string)null);
                });

            modelBuilder.Entity("company_website.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DATE_OF_BIRTH");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DEPARTMENT_ID");

                    b.Property<string>("Fullname")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("FULLNAME");

                    b.Property<string>("IdNo")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("ID_NO");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ACCOUNT_ID");

                    b.HasKey("Id")
                        .HasName("PK__EMPLOYEE__3214EC2764B462B6");

                    b.HasIndex("DepartmentId");

                    b.HasIndex(new[] { "UserAccountId" }, "UQ__EMPLOYEE__56453098A3D2F443")
                        .IsUnique()
                        .HasFilter("[USER_ACCOUNT_ID] IS NOT NULL");

                    b.ToTable("EMPLOYEE", (string)null);
                });

            modelBuilder.Entity("company_website.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CATEGORY_ID");

                    b.Property<string>("Content")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CONTENT");

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("THUMBNAIL");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("TITLE");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ACCOUNT_ID");

                    b.HasKey("Id")
                        .HasName("PK__POST__3214EC275D10D1B3");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("POST", (string)null);
                });

            modelBuilder.Entity("company_website.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NAME");

                    b.HasKey("Id")
                        .HasName("PK__ROLE__3214EC27BAE24ACD");

                    b.ToTable("ROLE", (string)null);
                });

            modelBuilder.Entity("company_website.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DetailsTask")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DETAILS_TASK");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EMPLOYEE_ID");

                    b.Property<string>("IdNo")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("ID_NO");

                    b.Property<string>("Status")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("STATUS");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("TASK_ID");

                    b.HasKey("Id")
                        .HasName("PK__SCHEDULE__3214EC27264FB104");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskId");

                    b.ToTable("SCHEDULES", (string)null);
                });

            modelBuilder.Entity("company_website.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("ExpectedEndDate")
                        .HasColumnType("date")
                        .HasColumnName("EXPECTED_END_DATE");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("NAME");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("START_DATE");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("STATUS");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("text")
                        .HasColumnName("TASK_DESCRIPTION");

                    b.Property<int?>("TeamSize")
                        .HasColumnType("int")
                        .HasColumnName("TEAM_SIZE");

                    b.Property<byte[]>("Thumbail")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("THUMBAIL");

                    b.HasKey("Id")
                        .HasName("PK__TASK__3214EC2707DAE29F");

                    b.ToTable("TASK", (string)null);
                });

            modelBuilder.Entity("company_website.Models.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("PASSWORD");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("Username")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__USER_ACC__3214EC273CF89E00");

                    b.HasIndex("RoleId");

                    b.ToTable("USER_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("company_website.Models.Department", b =>
                {
                    b.HasOne("company_website.Models.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__DEPARTMEN__COMPA__3E52440B");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("company_website.Models.Employee", b =>
                {
                    b.HasOne("company_website.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__EMPLOYEE__DEPART__5812160E");

                    b.HasOne("company_website.Models.UserAccount", "UserAccount")
                        .WithOne("Employee")
                        .HasForeignKey("company_website.Models.Employee", "UserAccountId")
                        .HasConstraintName("FK__EMPLOYEE__USER_A__59063A47");

                    b.Navigation("Department");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("company_website.Models.Post", b =>
                {
                    b.HasOne("company_website.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__POST__CATEGORY_I__5BE2A6F2");

                    b.HasOne("company_website.Models.UserAccount", "UserAccount")
                        .WithMany("Posts")
                        .HasForeignKey("UserAccountId")
                        .HasConstraintName("FK__POST__USER_ACCOU__5CD6CB2B");

                    b.Navigation("Category");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("company_website.Models.Schedule", b =>
                {
                    b.HasOne("company_website.Models.Employee", "Employee")
                        .WithMany("Schedules")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__SCHEDULES__EMPLO__5FB337D6");

                    b.HasOne("company_website.Models.Task", "Task")
                        .WithMany("Schedules")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK__SCHEDULES__TASK___60A75C0F");

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("company_website.Models.UserAccount", b =>
                {
                    b.HasOne("company_website.Models.Role", "Role")
                        .WithMany("UserAccounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__USER_ACCO__PASSW__5441852A");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("company_website.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("company_website.Models.Company", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("company_website.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("company_website.Models.Employee", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("company_website.Models.Role", b =>
                {
                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("company_website.Models.Task", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("company_website.Models.UserAccount", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
