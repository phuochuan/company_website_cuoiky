@model company_website.dto.TaskDto

@{
    ViewData["Title"] = "Edit";
}

<h1>Update Task</h1>
<h4>Task</h4>
<hr />

<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit" id="postForm" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TaskDescription" class="control-label"></label>
                <input asp-for="TaskDescription" class="form-control" />
                <span asp-validation-for="TaskDescription" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ExpectedEndDate" class="control-label"></label>
                <input asp-for="ExpectedEndDate" class="form-control" />
                <span asp-validation-for="ExpectedEndDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StartDate" class="control-label"></label>
                <input asp-for="StartDate" class="form-control" />
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>
                <input asp-for="Status" class="form-control" />
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Thumbail" class="control-label"></label>
                <input asp-for="Thumbail" class="form-control" />
                <span asp-validation-for="Thumbail" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>



@{
    var employeesOnThisTask = ViewBag.employeesOnThisTask as List<Employee>;
}
<div class="row">
    <h2 class="employee-table-table"> Emphoyee join in this task</h2>
    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Department</th>
                    <th>Modify</th>
                </tr>
            </thead>
            <tbody>
                @if (employeesOnThisTask != null && employeesOnThisTask.Any())
                {
                    foreach (var employee in employeesOnThisTask)
                    {
                        <tr>
                            <td>@employee.Id</td>
                            <td>@employee.Fullname</td>
                            <td>@employee.Department.Description</td>
                            <td><button onclick="removeFromTask(@employee.Id, @Model.Id)">Remove</button></td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3">No employees found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@{
    var employeesOutThisTask = ViewBag.employeesOutThisTask as List<Employee>;
}
<div class="row">
    <h2 class="employee-table-table"> Emphoyee Availible</h2>
    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Department</th>
                    <th>Modify</th>
                </tr>
            </thead>
            <tbody>
                @if (employeesOutThisTask != null && employeesOutThisTask.Any())
                {
                    foreach (var employee in employeesOutThisTask)
                    {
                        <tr>
                            <td>@employee.Id</td>
                            <td>@employee.Fullname</td>
                            <td>@employee.Department.Description</td>
                            <td><button onclick="addToTask(@employee.Id, @Model.Id)">Add to task</button></td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3">No employees found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>



<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}


<script>

    function validateStartDate() {
        var dateOfBirthInput = document.getElementById("StartDate");
        var dateOfBirthValue = dateOfBirthInput.value;

        var dateFormatRegex = /^\d{2}\/\d{2}\/\d{4}$/;

        if (!dateFormatRegex.test(dateOfBirthValue)) {
            dateOfBirthInput.focus();
            return false;
        }
        return true;
    }
    function endDateOfBirth() {
        var dateOfBirthInput = document.getElementById("ExpectedEndDate");
        var dateOfBirthValue = dateOfBirthInput.value;

        var dateFormatRegex = /^\d{2}\/\d{2}\/\d{4}$/;

        if (!dateFormatRegex.test(dateOfBirthValue)) {
            dateOfBirthInput.focus();
            return false;
        }
        return true;
    }

    function validateDates() {
        function parseDate(input) {
            // Split the input into parts
            var parts = input.split('/');
            // new Date(year, month index (0-11), day)
            return new Date(parts[2], parts[1] - 1, parts[0]);
        }

        var startDateValue = document.getElementById('StartDate').value;
        var endDateValue = document.getElementById('ExpectedEndDate').value;

        var startDate = parseDate(startDateValue);
        var endDate = parseDate(endDateValue);

        var isValid = true;

        if (startDate > endDate) {
            document.getElementById('StartDateError').innerText = 'Start Date must be less than or equal to End Date.';
            document.getElementById('ExpectedEndDateError').innerText = 'End Date must be greater than or equal to Start Date.';
            isValid = false;
        } else {
            document.getElementById('StartDateError').innerText = '';
            document.getElementById('ExpectedEndDateError').innerText = '';
        }

        return isValid;
    }


    document.getElementById("postForm").addEventListener("submit", function (event) {

        var ExpectedEndDateError = document.getElementById("ExpectedEndDateError");
        var StartDateError = document.getElementById("StartDateError");
        if (!endDateOfBirth()) {
            ExpectedEndDateError.textContent = "Please enter a valid date in the format dd/MM/yyyy.";
            event.preventDefault(); // Prevent form submission
        } else {
            StartDateError.textContent = ""; // Clear error message
            if (!validateStartDate()) {
                StartDateError.textContent = "Please enter a valid date in the format dd/MM/yyyy.";
                event.preventDefault(); // Prevent form submission
            } else {
                StartDateError.textContent = "";
            }

        }
        if (!validateDates()) {
            event.preventDefault();
        }

    });




    function addToTask(employeeId, taskId) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/Tasks/AddToTask';

        const employeeIdInput = document.createElement('input');
        employeeIdInput.type = 'hidden';
        employeeIdInput.name = 'employeeId';
        employeeIdInput.value = employeeId;
        form.appendChild(employeeIdInput);

        const taskIdInput = document.createElement('input');
        taskIdInput.type = 'hidden';
        taskIdInput.name = 'taskId';
        taskIdInput.value = taskId;
        form.appendChild(taskIdInput);

        const csrfToken = '@Html.AntiForgeryToken()';
        form.innerHTML += csrfToken;

        document.body.appendChild(form);
        form.submit();
    }
    function removeFromTask(employeeId, taskId) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/Tasks/RemoveFromTask';

        const employeeIdInput = document.createElement('input');
        employeeIdInput.type = 'hidden';
        employeeIdInput.name = 'employeeId';
        employeeIdInput.value = employeeId;
        form.appendChild(employeeIdInput);

        const taskIdInput = document.createElement('input');
        taskIdInput.type = 'hidden';
        taskIdInput.name = 'taskId';
        taskIdInput.value = taskId;
        form.appendChild(taskIdInput);

        const csrfToken = document.createElement('input');
        csrfToken.type = 'hidden';
        csrfToken.name = '__RequestVerificationToken';
        csrfToken.value = '@Html.AntiForgeryToken()'; // Using the AntiForgeryToken from your view
        form.appendChild(csrfToken);

        document.body.appendChild(form);
        form.submit();
    }
</script>